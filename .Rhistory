stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1, position = position_dodge(width = 2)) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=Species))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red", fill="red", position = position_dodge(width = 2)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1, position = position_dodge(width = 12)) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=Species))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red", fill="red", position = position_dodge(width = 2)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1, position = "dodge" +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=Species))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red", fill="red", position = position_dodge(width = 2)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1, position = "dodge") +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=Species))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red", fill="red", position = position_dodge(width = 0.8)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1, position = "dodge") +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=Species))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red", fill="red", position = position_dodge(width = 0.8)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red", fill="red", position = position_dodge(width = 0.8)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red", fill="red", position = position_dodge(width = 0.8)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = 12)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = 1)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = 2)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = 3)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = .3)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = 1)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = .9)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue", fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position = position_dodge(width = .9)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue",
fill="blue", position = position_dodge(width = .5)) +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=.1) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position=position_nudge(x = 0.1, y = 0)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue",
fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=0.1,
, position=position_nudge(x = 0.1, y = 0)) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=0.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position=position_nudge(x = 0.12, y = 0)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue",
fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=0.1,
, position=position_nudge(x = 0.12, y = 0)) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=0.1)
ggplot(iris.df, aes(x=as.factor(Species)))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position=position_nudge(x = 0.12, y = 0)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue",
fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=0.1,
position=position_nudge(x = 0.12, y = 0)) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=0.1)
ggplot(iris.df, aes(x=Species))+
stat_summary(aes(y=Sepal.Length), fun.y=mean, geom='point', shape=23, size=3, color="red",
fill="red", position=position_nudge(x = 0.12, y = 0)) +
stat_summary(aes(y=Sepal.Width), fun.y=mean, geom='point', shape=23, size=3, color="blue",
fill="blue") +
stat_summary(aes(y=Sepal.Length), fun.data = mean_sdl, geom = "errorbar", color="red", width=0.1,
position=position_nudge(x = 0.12, y = 0)) +
stat_summary(aes(y=Sepal.Width),fun.data = mean_sdl, geom = "errorbar", color="blue", width=0.1)
# One new package for summary stats
#install.packages("psych")
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(scales)
library(skimr)
# read in the file
iris.df <- read_csv("data/iris.csv")
glimpse(iris.df)
library(janitor)
iris2.df <- iris.df %>% clean_names()
View(iris2.df)
iris.df %>%
gglplot(aes(y=Sepal.Width)) +
geom_histogram()
iris.df %>%
ggplot(aes(y=Sepal.Width)) +
geom_histogram()
iris.df %>%
ggplot(aes(y=Sepal.Width)) +
geom_histogram(stat = "bin")
iris.df %>%
ggplot(aes(Sepal.Width)) +
geom_histogram(stat = "bin")
iris.df %>%
ggplot(aes(Sepal.Width)) +
geom_histogram()
iris.df <- read_csv("data/iris.csv") %>% clean_names()
# remove_empty_rows() %>% # removes empty rows if they are thee
# remove_empty_cols() # removes the empty column is they are there
iris.df <- read_csv("data/iris.csv") %>% clean_names()
# remove_empty_rows() %>% # removes empty rows if they are thee
# remove_empty_cols() # removes the empty column is they are there
glimpse(iris.df)
petal_width.df <- select(iris.df, Species, petal_width)
petal_width.df <- select(iris.df, c(Species, petal_width))
petal_width.df <- select(df=iris.df, Species, petal_width)
petal_width.df <- select(df=iris.df, species, petal_width)
petal_width.df <- select(df=iris.df, species, petal_width)
petal_width.df <- iris.df %>% select(species, petal_width)
petal_width.df <- select(iris.df (species, petal_width))
petal_width.df <- select(df=iris.df (species, petal_width))
petal_width.df <- select(iris.df, (species, petal_width))
petal_width.df <- select(iris.df, species, petal_width)
petal.df <- iris.df %>% select(species, starts_with("petal")
petal.df <- iris.df %>% select(species, species, starts_with("petal")
petal.df <- iris.df %>% select(species, species, starts_with("petal"))
View(petal.df)
install.packages(c("klaR", "LearnBayes", "rgdal", "xts"))
rmd2rscript(02_ggplot.Rmd)
rmd2rscript("02_ggplot.Rmd")
#' ## script for converting .Rmd files to .R scripts.
#' #### Kevin Keenan 2014
#'
#' This function will read a standard R markdown source file and convert it to
#' an R script to allow the code to be run using the "source" function.
#'
#' The function is quite simplisting in that it reads a .Rmd file and adds
#' comments to non-r code sections, while leaving R code without comments
#' so that the interpreter can run the commands.
#'
#'
rmd2rscript <- function(infile){
# read the file
flIn <- readLines(infile)
# identify the start of code blocks
cdStrt <- which(grepl(flIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(flIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# define an expansion function
# strip code block indacators
flIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(flIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
flIn[i] <- paste("#' ", flIn[i], sep = "")
}
# create an output file
nm <- strsplit(infile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "[rmd2r].R", sep = ""), "w")
for(i in 1:length(flIn)){
cat(flIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
rmd2rscript(02_ggplot.Rmd)
rmd2rscript("02_ggplot.Rmd")
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(scales)
library(skimr)
#' read in the csv file
#' note here we are using relative file paths to find the file
#' try hitting "" and then tab inside of the "" - this will bring up choices
iris.df <- read_csv("data/iris.csv")
#' ##View Data
#' Look at the data with glimpse
glimpse(iris.df)
#' This is the start of how to make a plot in ggplot
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width)) +
geom_point()
#' ##Colors of points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width), color="blue") +
geom_point()
#' ##Colors of points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width), color="blue") +
geom_point()
#' ##Colors of points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width)) +
geom_point(color="blue")
#' Map the color to species	categories
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point()
#' size of points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width)) +
geom_point(size=3)
#' size of points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point(size=3)
#' ##Size of points based on speies
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, size=Petal.Width, color=Species)) +
geom_point()
#' ##Shapes of Points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, shape=Species)) +
geom_point()
#' ##Shapes of Points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
geom_point(size=3)
#' This is the same as the above plot but puts the aesthetics in the geometry
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width))
#' What is the advantage of doing the above method?
#' How could you add a set of points for `Sepal.Length` and `Sepal.Width`
ggplot(data=iris.df) +
geom_point(aes(x=Sepal.Length, y=Sepal.Width))
#' What is intersting to do is to make multiple plots based on one of the grouping
#' cahracters to see the distribution of points in each category
#' ## Facetting
#' Now the cool thing to be able to look at data is to be able to facet or look at subplots of all of the data at once
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
facet_grid(. ~ Species)
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
facet_grid(Species ~ ., scales = "free")
#' Facet wrap is slightly different and will allow you to have all free scales and facet by species
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
facet_wrap("Species", scales = "free")
iris_excel.df <- read_excel("data/iris_excel.xlsx")
iris_excel.df <- read_xl("data/iris_excel.xlsx")
iris_excel.df <- read_xlsx("data/iris_excel.xlsx")
library(readxl)
iris_excel.df <- read_excel("data/iris_excel.xlsx", sheet="iris_excel")
iris_excel.df <- read_excel("data/iris_excel.xlsx")
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width), size=3)
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point(size=3)
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width), size=3)
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point(size=4)
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, shape=Species)) +
geom_point(size=4)
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
geom_point() +
ggtitle("Petal Shape") +
labs(x="Petal Length", y="Petal Width")
# we will get into themes but this will center the title
# theme(plot.title = element_text(hjust = 0.5))
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(scales)
library(skimr)
# read in the csv file
# note here we are using relative file paths to find the file
# try hitting "" and then tab inside of the "" - this will bring up choices
iris.df <- read_csv("data/iris.csv")
#'Lets read in the iris excel file
#'The only thing that you might need to do is specify the sheet if you use
#'multiple sheets
#'
iris_excel.df <- read_excel("data/iris_excel.xlsx", sheet="iris_excel")
# if there is only one sheet - no worries
library(readxl)
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(readxl)
library(scales)
library(skimr)
# read in the csv file
# note here we are using relative file paths to find the file
# try hitting "" and then tab inside of the "" - this will bring up choices
iris.df <- read_csv("data/iris.csv")
#'Lets read in the iris excel file
#'The only thing that you might need to do is specify the sheet if you use
#'multiple sheets
#'
iris_excel.df <- read_excel("data/iris_excel.xlsx", sheet="iris_excel")
# if there is only one sheet - no worries
glimpse(iris.df)
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(scales)
library(readxl)
library(skimr)
#' read in the csv file
#' note here we are using relative file paths to find the file
#' try hitting "" and then tab inside of the "" - this will bring up choices
iris.df <- read_csv("data/iris.csv")
iris_excel.df <- read_excel("data/iris_excel.xlsx", sheet="iris_excel")	# if there is only one sheet - no worries
#' ##View Data
#' Look at the data with glimpse
glimpse(iris.df)
#' This is the start of how to make a plot in ggplot
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width)) +
geom_point()
#' This is the same as the above plot but puts the aesthetics in the geometry
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width))
#' What is the advantage of doing the above method?
#' How could you add a set of points for `Sepal.Length` and `Sepal.Width` to the
#' existing graph
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width))
#' ##Colors of points that are all the same
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width)) +
geom_point(color="blue")
#' Map the color to species	categories
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point()
#' size of points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point(size=3)
#' ##Size of points based on Petal Width and color based on species
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, size=Petal.Width, color=Species)) +
geom_point()
#' ##Shapes of Points
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
geom_point(size=3)
#' What is intersting to do is to make multiple plots based on one of the grouping
#' characters to see the distribution of points in each category
#' ## Facetting
#' Now the cool thing to be able to look at data is to be able to facet or look at subplots of all of the data at once
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
facet_grid(. ~ Species)
ggplot(data=iris.df) +
geom_point(aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
facet_grid(Species ~ ., scales = "free")
#' Facet wrap is slightly different and will allow you to have all free scales and facet by species
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
geom_point() +
facet_wrap("Species", scales = "free")
#' ## Adding Titles
#' Now to add in some of the basic things you might want to have on there to make
#' it look nicer. We will work more on this later to get it publication quality
#' but this is a start.
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width, shape=Species, color=Species)) +
geom_point() +
ggtitle("Petal Shape") +
labs(x="Petal Length", y="Petal Width")
#' ##Time series plots
streams.df <- read_csv("data/streams_q_gage_no3.csv", guess_max = 10000)
glimpse(streams.df)
#' ##Basic time series plot
ggplot(streams.df, aes(datetime, no3_mgl, color=site)) +
geom_point()
#' ##Scales - time series
ggplot(streams.df, aes(datetime, no3_mgl, color=site)) +
geom_point() +
scale_y_continuous()+ #expand=c(0,0), breaks=c(0,30,60)
scale_x_datetime(date_breaks = "1 month",
limits = ymd_hms(c('2017-01-01 00:00:00','2017-12-31 00:00:00')),
labels=date_format("%Y-%b-%d"), expand=c(0,0))
#' ##Themes
ggplot(streams.df, aes(datetime, no3_mgl, color=site)) +
geom_point() +
scale_y_continuous()+ #expand=c(0,0), breaks=c(0,30,60)
scale_x_datetime(date_breaks = "1 month",
limits = ymd_hms(c('2017-01-01 00:00:00','2017-12-31 00:00:00')),
labels=date_format("%Y-%b-%d"), expand=c(0,0)) +
theme_bw()
#' ##Theme - adjust text
ggplot(streams.df, aes(datetime, no3_mgl, color=site)) +
geom_point() +
scale_y_continuous()+ #expand=c(0,0), breaks=c(0,30,60)
scale_x_datetime(date_breaks = "1 month",
limits = ymd_hms(c('2017-01-01 00:00:00','2017-12-31 00:00:00')),
labels=date_format("%Y-%b-%d"), expand=c(0,0)) +
theme(
# LABLES APPEARANCE
axis.title.x=element_text(size=12, face="bold"),
axis.title.y=element_text(size=12, face="bold"),
axis.text.x = element_text(size=10, face="bold", angle=45, hjust=1),
axis.text.y = element_text(size=10, face="bold"))
#' ##Final time series plot
#' So lets make all the changes to the graph that we might want to do
ggplot(streams.df, aes(datetime, no3_mgl, color=site)) +
geom_point() +
scale_y_continuous()+ #expand=c(0,0), breaks=c(0,30,60)
scale_x_datetime(date_breaks = "1 month",
limits = ymd_hms(c('2017-01-01 00:00:00','2017-12-31 00:00:00')),
labels=date_format("%Y-%b-%d"), expand=c(0,0)) +
scale_color_manual (name="Sites",
labels=c("Indian Cr.", "Vermillion Cr."),
values=c("red","darkblue")) +
labs(x = "", y = "Nitrate NO3 (mg L^-1") +
theme(
# LABLES APPEARANCE
axis.title.x=element_text(size=12, face="bold"),
axis.title.y=element_text(size=12, face="bold"),
axis.text.x = element_text(size=10, face="bold", angle=45, hjust=1),
axis.text.y = element_text(size=10, face="bold"),
# plot.title = element_text(hjust = 0.5, colour="black", size=22, face="bold"),
# LEGEND
# legend.position="none",
# LEGEND TEXT
legend.text = element_text(colour="black", size = 12, face = "bold"),
# LEGEND TITLE
legend.title = element_text(colour="black", size=14, face="bold"),
# LEGEND POSITION AND JUSTIFICATION
# legend.justification=c(0.1,1),
# legend.position=c(0.02,.99),
# PLOT COLORS
# REMOVE BOX BEHIND LEGEND SYMBOLS
# REMOVE LEGEND BOX
legend.key = element_rect(fill = "transparent", colour = "transparent"),
# REMOVE LEGEND BOX
legend.background = element_rect(fill = "transparent", colour = "transparent"),
# #REMOVE PLOT FILL AND GRIDS
# panel.background=element_rect(fill = "transparent", colour = "transparent"),
# # removes the window background
# plot.background=element_rect(fill="transparent",colour=NA),
# # removes the grid lines
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# ADD AXES LINES AND SIZE
axis.line.x = element_line(color="black", size = 0.3),
axis.line.y = element_line(color="black", size = 0.3),
# ADD PLOT BOX
panel.border = element_rect(colour = "black", fill=NA, size=0.3))
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(readxl)
library(scales)
library(skimr)
# read in the csv file
# note here we are using relative file paths to find the file
# try hitting "" and then tab inside of the "" - this will bring up choices
iris.df <- read_csv("data/iris.csv")
#'Lets read in the iris excel file
#'The only thing that you might need to do is specify the sheet if you use
#'multiple sheets
#'
iris_excel.df <- read_excel("data/iris_excel.xlsx", sheet="iris_excel")
# if there is only one sheet - no worries
glimpse(iris.df)
head(iris.df)
# tail(iris.df)
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width)) +
geom_point()
install.packages("RMarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("install.packages("rmarkdown")")
# R and Tidyverse
This web site should help you get up and runing on R and RStudio using tidyverse. I am focused on aquatic sciences and environmental monitoring data, but this should be felxible in its uses. We will follow the approach of of "[R for Data Science](HTTP://r4ds.had.co.nz/)" by Garrett Grolemund and Hadley Wickham where we import data and focus on graphing. Statistics will be secondary but we will cover some of the basics.
install.packages("install.packages("rmarkdown")")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
clean_site(preview = FALSE)
install.packages(c("mvtnorm", "plotly", "quantreg"))
