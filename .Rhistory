# tail(iris.df)
ggplot(data=iris.df, aes(x=Petal.Length, y=Petal.Width)) +
geom_point()
install.packages("RMarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("install.packages("rmarkdown")")
# R and Tidyverse
This web site should help you get up and runing on R and RStudio using tidyverse. I am focused on aquatic sciences and environmental monitoring data, but this should be felxible in its uses. We will follow the approach of of "[R for Data Science](HTTP://r4ds.had.co.nz/)" by Garrett Grolemund and Hadley Wickham where we import data and focus on graphing. Statistics will be secondary but we will cover some of the basics.
install.packages("install.packages("rmarkdown")")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
clean_site(preview = FALSE)
install.packages(c("mvtnorm", "plotly", "quantreg"))
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(readxl)
library(scales)
library(skimr)
library(janitor)
library(patchwork)
# Read in file using tidyverse code-----
mm.df <- read_csv("data/mms.csv")
# Note you can read in excel files just as easy
mm_excel.df <- read_excel("data/mms.xlsx")
# data Structure
str(south.df)
# data Structure
str(mm.df)
# or
glimpse(mm.df)
# Saving files -----
# We can save the file we just read in using
# Saving dataframes -----
# lets say you have made a lot of changes and its now time to save the dataframe
write_csv(mm.df, "finalized_data/mm_output.csv")
# GGplot uses layers to build a graph
ggplot(data=mm.df, aes(x=color, y=diamter)) + # this sets up data
geom_point() # this adds a geometry to present the data from above
# GGplot uses layers to build a graph
ggplot(data=mm.df, aes(x=color, y=diameter)) + # this sets up data
geom_point() # this adds a geometry to present the data from above
# Add geom_point() -----
# Add points to the graph below using geom_point()
ggplot(south.df, aes(x=color, y=diameter))
geom_point()
# Add geom_point() -----
# Add points to the graph below using geom_point()
ggplot(south.df, aes(x=color, y=diameter)) +
geom_point()
# Add geom_point() -----
# Add points to the graph below using geom_point()
ggplot(mmd.f, aes(x=color, y=diameter)) +
geom_point()
# Add geom_point() -----
# Add points to the graph below using geom_point()
ggplot(mm.df, aes(x=color, y=diameter)) +
geom_point()
# Adding axes labels ----
ggplot(mm.df, aes(x=color, y=diameter)) +
geom_boxplot() +
geom_point() +
labs(x = "Color", y = "Diameter")
# Label expressions -----
# Adding special formatting to labels
ggplot(mm.df, aes(x=color, y=diameter)) +
geom_line() +
geom_point() +
labs(x = "color", y = expression(bold("Diameter ("*mu")")))
# Label expressions -----
# Adding special formatting to labels
ggplot(mm.df, aes(x=color, y=diameter)) +
geom_line() +
geom_point() +
labs(x = "color", y = expression(bold("Diameter ("*mu*")")))
# Label expressions -----
# Adding special formatting to labels
ggplot(mm.df, aes(x=color, y=diameter)) +
geom_line() +
geom_point() +
labs(x = "color", y = expression(bold("Diameter ("*mu*"*1000)")))
# Label expressions -----
# Adding special formatting to labels
ggplot(mm.df, aes(x=color, y=diameter)) +
geom_boxplot() +
geom_point() +
labs(x = "color", y = expression(bold("Diameter ("*mu*"*1000)")))
# load the libraries each time you restart R
library(tidyverse)
library(lubridate)
library(readxl)
library(scales)
library(skimr)
library(janitor)
library(patchwork)
# Read in file using tidyverse code-----
mm.df <- read_csv("data/mm.csv")
# Read in file using tidyverse code-----
mm.df <- read_csv("data/mms.csv")
# Note you can read in excel files just as easy
mm_excel.df <- read_excel("data/mms.xlsx")
# Label expressions -----
# Adding special formatting to labels
ggplot(mm.df, aes(x=color, y=diameter)) +
geom_boxplot() +
geom_point() +
labs(x = "color", y = "Diameter")
mm.df %>%
ggplot(aes(color, diameter)) +
geom_boxplot() +
labs(x = "color", y = "Diameter")
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter")
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter")
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
Name="Shell Color",
values = c("blue", "brown", "greeen", "orange", "red", "yellow")
)
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
name = "Shell Color",
# labels = c("Reference", "Pennycress", "Pennycress+N"),
values = c("blue", "brown", "green", "orange", "red", "yellow")
)
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
name = "Shell Color",
labels = c("Blue", "Brown", "Green", "Orange", "Red", "Yellow"),
values = c("blue", "brown", "green", "orange", "red", "yellow")
)
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
name = "Shell Color",
labels = c("Blue", "Brown", "Green", "Orange", "Red", "Yellow"),
values = c("blue", "brown", "green", "orange", "red", "yellow")
) +
scale_y_continuous(limits = c(10,20))
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
name = "Shell Color",
labels = c("Blue", "Brown", "Green", "Orange", "Red", "Yellow"),
values = c("blue", "brown", "green", "orange", "red", "yellow")
) +
scale_y_continuous(limits = c(10,15))
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
name = "Shell Color",
labels = c("Blue", "Brown", "Green", "Orange", "Red", "Yellow"),
values = c("blue", "brown", "green", "orange", "red", "yellow")
) +
coord_cartesian(ylim=c(10,12))
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
name = "Shell Color",
labels = c("Blue", "Brown", "Green", "Orange", "Red", "Yellow"),
values = c("blue", "brown", "green", "orange", "red", "yellow")
) +
coord_cartesian(ylim=c(10,15))
mm.df %>%
ggplot(aes(color, diameter, color=color)) +
geom_boxplot() +
labs(x = "color", y = "Diameter") +
scale_color_manual(
name = "Shell Color",
labels = c("Blue", "Brown", "Green", "Orange", "Red", "Yellow"),
values = c("blue", "brown", "green", "orange", "red", "yellow")
) +
coord_cartesian(ylim=c(10,14))
river.df <- read_csv("data/vermillion_danville.csv")
View(river.df)
river.df <- read_csv("data/vermillion_danville.csv")
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales pacakges
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1")")))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales pacakges
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")")))
+
scale_x_date(date_breaks = "6 month",
# limits = as_datetime(c('2017-06-01 00:00:00','2017-08-01 00:00:00')),
labels=date_format("%Y-%m-%d"), expand=c(0,0))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales pacakges
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")")))
#      +
# scale_x_date(date_breaks = "6 month",
#          # limits = as_datetime(c('2017-06-01 00:00:00','2017-08-01 00:00:00')),
#       labels=date_format("%Y-%m-%d"), expand=c(0,0))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales pacakges
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")")))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales package
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_date(date_breaks = "6 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%Y-%m-%d"))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales package
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_datetime(date_breaks = "6 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%Y-%m-%d"))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales package
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_datetime(date_breaks = "2 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%Y-%m-%d"))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales package
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_datetime(date_breaks = "1 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%Y-%m-%d"))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales package
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_datetime(date_breaks = "1 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%Y-%m"))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales package
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_datetime(date_breaks = "1 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%M"))
# Dates on the X-Axis -----
# So now you might want to change the axes scales
# uses the scales package
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_datetime(date_breaks = "1 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b"))
ggThemeAssist:::ggThemeAssistAddin()
# Themes for graphs -----
# Here we need to start setting the theme for the graph or appearance
# There are built in theme
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Discharge (ft"^3*"sec"^-1*")"))) +
scale_x_datetime(date_breaks = "1 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b"))+
theme_light()
ggThemeAssist:::ggThemeAssistAddin()
# Commonly used theme settings ------
# This is the set of theme settings I use
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = expression(bold("Animals (No. L"^-1*")"))) +
scale_x_datetime(date_breaks = "2 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b")) +
theme(
# LABLES APPEARANCE
axis.title.x=element_text(size=14, face="bold"),
axis.title.y=element_text(size=14, face="bold"),
axis.text.x = element_text(size=14, face="bold", angle=45, hjust=1),
axis.text.y = element_text(size=14, face="bold"),
# plot.title = element_text(hjust = 0.5, colour="black", size=22, face="bold"),
# LEGEND
legend.position="none",
# LEGEND TEXT
legend.text = element_text(colour="black", size = 14, face = "bold"),
# LEGEND TITLE
legend.title = element_text(colour="black", size=16, face="bold"),
# LEGEND POSITION AND JUSTIFICATION
# legend.justification=c(0.1,1),
# legend.position=c(0.02,.99),
# REMOVE LEGEND BOX
# legend.key = element_rect(fill = "transparent", colour = "transparent"),
# REMOVE LEGEND BOX
# legend.background = element_rect(fill = "transparent", colour = "transparent"),
# #REMOVE PLOT FILL AND GRIDS
# panel.background=element_rect(fill = "transparent", colour = "transparent"),
# # removes the window background
# plot.background=element_rect(fill="transparent",colour=NA),
# # removes the grid lines
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# ADD AXES LINES AND SIZE
axis.line.x = element_line(color="black", size = 0.3),
axis.line.y = element_line(color="black", size = 0.3),
# ADD PLOT BOX
panel.border = element_rect(colour = "black", fill=NA, size=0.3))
# Commonly used theme settings ------
# This is the set of theme settings I use
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
geom_point() +
labs(x = "Date", y = expression(bold("Animals (No. L"^-1*")"))) +
scale_x_datetime(date_breaks = "2 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b")) +
theme(
# LABLES APPEARANCE
axis.title.x=element_text(size=14, face="bold"),
axis.title.y=element_text(size=14, face="bold"),
axis.text.x = element_text(size=14, face="bold", angle=45, hjust=1),
axis.text.y = element_text(size=14, face="bold"),
# plot.title = element_text(hjust = 0.5, colour="black", size=22, face="bold"),
# LEGEND
legend.position="none",
# LEGEND TEXT
legend.text = element_text(colour="black", size = 14, face = "bold"),
# LEGEND TITLE
legend.title = element_text(colour="black", size=16, face="bold"),
# LEGEND POSITION AND JUSTIFICATION
# legend.justification=c(0.1,1),
# legend.position=c(0.02,.99),
# REMOVE LEGEND BOX
# legend.key = element_rect(fill = "transparent", colour = "transparent"),
# REMOVE LEGEND BOX
# legend.background = element_rect(fill = "transparent", colour = "transparent"),
# #REMOVE PLOT FILL AND GRIDS
# panel.background=element_rect(fill = "transparent", colour = "transparent"),
# # removes the window background
# plot.background=element_rect(fill="transparent",colour=NA),
# # removes the grid lines
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# ADD AXES LINES AND SIZE
axis.line.x = element_line(color="black", size = 0.3),
axis.line.y = element_line(color="black", size = 0.3),
# ADD PLOT BOX
panel.border = element_rect(colour = "black", fill=NA, size=0.3))
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Animals (No. L"^-1*")"))) +
scale_x_datetime(date_breaks = "2 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b")) +
theme(
# LABLES APPEARANCE
axis.title.x=element_text(size=14, face="bold"),
axis.title.y=element_text(size=14, face="bold"),
axis.text.x = element_text(size=14, face="bold", angle=45, hjust=1),
axis.text.y = element_text(size=14, face="bold"),
# plot.title = element_text(hjust = 0.5, colour="black", size=22, face="bold"),
# LEGEND
legend.position="none",
# LEGEND TEXT
legend.text = element_text(colour="black", size = 14, face = "bold"),
# LEGEND TITLE
legend.title = element_text(colour="black", size=16, face="bold"),
# LEGEND POSITION AND JUSTIFICATION
# legend.justification=c(0.1,1),
# legend.position=c(0.02,.99),
# REMOVE LEGEND BOX
# legend.key = element_rect(fill = "transparent", colour = "transparent"),
# REMOVE LEGEND BOX
# legend.background = element_rect(fill = "transparent", colour = "transparent"),
# #REMOVE PLOT FILL AND GRIDS
# panel.background=element_rect(fill = "transparent", colour = "transparent"),
# # removes the window background
# plot.background=element_rect(fill="transparent",colour=NA),
# # removes the grid lines
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# ADD AXES LINES AND SIZE
axis.line.x = element_line(color="black", size = 0.3),
axis.line.y = element_line(color="black", size = 0.3),
# ADD PLOT BOX
panel.border = element_rect(colour = "black", fill=NA, size=0.3))
# Run this and it will store it as an object for use later
theme_class <- function(base_size = 14, base_family = "Times")
{
theme(
# LABLES APPEARANCE
axis.title.x=element_text(size=14, face="bold"),
axis.title.y=element_text(size=14, face="bold"),
axis.text.x = element_text(size=14, face="bold", angle=45, hjust=1),
axis.text.y = element_text(size=14, face="bold"),
# plot.title = element_text(hjust = 0.5, colour="black", size=22, face="bold"),
# LEGEND
legend.position="none",
# LEGEND TEXT
legend.text = element_text(colour="black", size = 14, face = "bold"),
# LEGEND TITLE
legend.title = element_text(colour="black", size=16, face="bold"),
# LEGEND POSITION AND JUSTIFICATION
# legend.justification=c(0.1,1),
# legend.position=c(0.02,.99),
# REMOVE LEGEND BOX
# legend.key = element_rect(fill = "transparent", colour = "transparent"),
# REMOVE LEGEND BOX
# legend.background = element_rect(fill = "transparent", colour = "transparent"),
# #REMOVE PLOT FILL AND GRIDS
# panel.background=element_rect(fill = "transparent", colour = "transparent"),
# # removes the window background
# plot.background=element_rect(fill="transparent",colour=NA),
# # removes the grid lines
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# ADD AXES LINES AND SIZE
axis.line.x = element_line(color="black", size = 0.3),
axis.line.y = element_line(color="black", size = 0.3),
# ADD PLOT BOX
panel.border = element_rect(colour = "black", fill=NA, size=0.3))
}
# using the new theme
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Animals (No. L"^-1*")"))) +
scale_x_datetime(date_breaks = "2 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b"))+
theme_class()
# Saving named plots-----
# you can also save the plot and save by name----
plot1.plot <-  ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Animals (No. L"^-1*")"))) +
scale_x_datetime(date_breaks = "2 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b"))+
theme_class()
plot1.plot
ggsave(plot1.plot,
file="figures/plot1.pdf",
width = 10, height = 8,
units="in",
dpi=300)
# Saving named plots-----
# you can also save the plot and save by name----
plot1.plot <-  ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line() +
labs(x = "Date", y = expression(bold("Animals (No. L"^-1*")"))) +
scale_x_datetime(date_breaks = "2 month",
limits = as_datetime(c('2017-01-01 00:00:00','2017-12-24 24:00:00')),
labels=date_format("%b"))+
theme_class()
plot1.plot
ggsave(plot1.plot,
file="figures/plot1.pdf",
width = 10, height = 8,
units="in",
dpi=300)
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_point(size=1, shape=6)
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_point(size=.19, shape=6)
ggplot(river.df, aes(x=datetime, y=discharge_cfs)) +
geom_line( linetype ="longdash")
